git site：http://git-scm.com
git check sheet

git init: create repository

git add file: add a file to stage
git commit -m "comment": commit to branch: 
git reflog: get all commit logs
git reset HEAD~n: reset HEAD to specific commit

git checkout -- file: revert changed or deleted uncommitted files 


git rm file: remove file
revert rm file: git reset HEAD file, git checkout -- file

create remote repository:
generate ssh key via Git Bash: ssh-keygen -t rsa -C "email"
login to Github-> Account settings->SSH Keys-> Add SSH Key, paste the id_rsa.pub content.
Create a new repository, link to remote repository: git remote add origin git@github.com:sunjay007/learngit.git  (origin is remote repository)
Push local repository to remote: git push -u origin master (first time push) , git push origin master (after first push)

git clone git@github.sunjay007/gitskills.git: clone remote repository to local

git branch dev: create new branch
git checkout dev: switch to new branch
git checkout -b dev
git branch: check current branches

?git checkout master, git merge dev: merge changes from dev to current branch
Fast-forward: 这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。

git branch -d dev: delete branch

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
查看分支合并图: git log --graph 
git log --graph --pretty=oneline --abbrev-commit

--no-ff参数，表示禁用Fast forward：git merge --no-ff -m "merge with no-ff" dev
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并

团队合作的分支看起来就像这样：
git-br-policy



git stash: Saved working directory and index state of uncompleted and uncommitted works 
git stash apply: resume the uncompleted works from stash 
git stash drop: delete the saved stash list 
resume uncompleted stash and delete the stash list: git stash pop (git stash apply & git stash drop)
git stash list: check stash status
resume to specific stash while multiple stash listed: git stash apply stash@{0} (stash@1)

添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
git branch feature-vulcan
git branch -D feature-vulcan: force delete branch without merge

git remote: check remote branch status, 
git remote -v will show below information:
origin  git@github.com:michaelliao/learngit.git (fetch)
origin  git@github.com:michaelliao/learngit.git (push)
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地

git push origin {branch-name}: push dev branch to remote, git push origin master
git clone will only clone master branch, checkout the dev from origin/dev after clone: git checkout -b dev origin/dev
(git checkout -b branch-name origin/branch-name)

git pull: merge the remote changes to local before push
git branch --set-upstream dev origin/dev: link local dev & origin/dev to work

因此，多人协作的工作模式通常是这样：

首先，可以试图用git push origin branch-name推送自己的修改；

如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；

如果合并有冲突，则解决冲突，并在本地提交；

没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。

git tag {name}: create new tag,(git tag v1.0)
git tag: list created tags
git tag {tagname} {commit id}: tag for a specific commit,(git tag v0.9 5d66ad8)
git show {tagname}: show a specific tag information:  (git show v0.1)
git tag -a {tagname} -m "comment" {commit id}: tag with comment 

还可以通过-s用私钥签名一个标签, PGP标签：git tag -s v0.2 -m "signed version 0.2 released" fec145a
git tag -d {tagname}: delete a tag on local, git tag -d v0.1
git push origin :refs/tags/{tagname}: delete a tag from remote
git push origin {name}: push tag to remote, (git push origin v1.0)
git push origin --tag: push all tags to remote 

在github repository里，点“Fork”就能在自己的账号下克隆了一个repository
如果你想修复bootstrap的一个bug，或者新增一个功能，立刻就可以开始干活，干完后，往自己的仓库推送。
如果你希望bootstrap的官方库能接受你的修改，你就可以在GitHub上发起一个pull request。当然，对方是否接受你的pull request就不一定了。

git config --global color.ui true: config git color
在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignor

忽略文件的原则是：
1. 忽略操作系统自动生成的文件，比如缩略图等；
2. 忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；
3. 忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
使用Windows的童鞋注意了，如果你在资源管理器里新建一个.gitignore文件，它会非常弱智地提示你必须输入文件名，但是在文本编辑器里“保存”或者“另存为”就可以把文件保存为.gitignore了。

git config --global alias.st status: name alias for git command
 
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"